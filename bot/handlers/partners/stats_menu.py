from aiogram import types

from ...database.methods.users import get as user_get
from ...database.methods.users import create as user_create

from ...database.methods.partners import get as partners_get

from ...database.methods.orders import get as orders_get

from ...database.methods.goods import get as goods_get

from ...logs import logger


async def stats_menu(msg: types.Message) -> None:
    if msg.from_user is None:
        return

    partner_info = await partners_get.get(msg.from_user.id)

    if partner_info is None:
        return

    message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.full_name}!
–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ <a href="t.me/portablemarket_bot">Portable Market</a>

üîé <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚óè  –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{partner_info[4].upper()}</code> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
‚óè  –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/portablemarket_bot?start={partner_info[4].upper()}
‚óè  –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: –°–∫–∏–¥–∫–∞ {partner_info[5]}% –Ω–∞ –ª—é–±–æ–π –∑–∞–∫–∞–∑ –ø–æ –í–∞—à–µ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É
‚óè  –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {partner_info[10]}
‚óè  –¢–∏–ø: {partner_info[11]}
    
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>
‚óè –ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–∂: {partner_info[6]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ –í–∞—à–µ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ
‚óè –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {partner_info[7]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ
‚óè –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–æ–¥–∞–∂: {round(int(partner_info[6]) / max(1, int(partner_info[7])) * 100, 2)}%
–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ü—Ä–æ–¥–∞–∂/–ö–æ–ª-–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ %)
    
üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>
‚óè –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {round(int(partner_info[8]) / max(1, int(partner_info[6])), 2)}‚ÇΩ
–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞ –∫ –∫–æ–ª-–≤—É –ø—Ä–æ–¥–∞–∂
‚óè –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {partner_info[8]}‚ÇΩ
–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
‚óè –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {partner_info[9]}‚ÇΩ
–≠—Ç—É —Å—É–º–º—É –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–∫—É—Ä–∞—Ç–æ—Ä—É"""

    keyboard_structure = [
        [
            types.InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", callback_data="lastpartnersales"),
        ],
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_structure)

    await msg.answer(text=message, parse_mode="HTML", reply_markup=keyboard)


async def last_sales(clb: types.CallbackQuery) -> None:
    msg = clb.message
    if msg.from_user is None:
        return

    partner_info = await partners_get.get(int(clb.from_user.id))
    print(partner_info, clb.from_user.id)
    if partner_info is None:
        return

    all_partner_sales = await orders_get.get_by_partner_id(int(partner_info[0]))
    success_partner_sales = []
    for sale in all_partner_sales:
        if sale[2] == 1:
            success_partner_sales.append(sale)

    message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {clb.from_user.full_name}!
–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ <a href="t.me/portablemarket_bot">Portable Market</a>

üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏</b>\n""" + '\n\n'.join(
        [
            f'{order[0]}. {(await goods_get.get(order[6]))[2]}\n–¶–µ–Ω–∞: {(await goods_get.get(order[6]))[3]}‚ÇΩ\n–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {int((await goods_get.get(order[6]))[11])}‚ÇΩ\n–í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: {int((await goods_get.get(order[6]))[11] / 2)}‚ÇΩ'
            for order in success_partner_sales] if success_partner_sales else ['–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ—Ç'])

    print(message)
    keyboard_structure = [
        [
            types.InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", callback_data="lastpartnersales"),
        ],
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_structure)

    await clb.message.answer(text=message, parse_mode="HTML")
