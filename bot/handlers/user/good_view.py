from aiogram import types
from aiogram.utils.exceptions import MessageNotModified

from ...database.methods.users import get as user_get
from ...database.methods.users import create as user_create

from ...database.methods.categories import get as categories_get

from ...database.methods.goods import get as goods_get

from ...logs import logger


async def good_view(clb: types.CallbackQuery) -> None:
    if clb.from_user is None:
        return

    good_info = await goods_get.get(int(clb.data.replace("good_", "")))

    if good_info is None:
        logger.error(f"–¢–æ–≤–∞—Ä ({clb.data.replace('good_', '')}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. TG_ID: {clb.from_user.id}.")
        return

    # message = f"–¢–æ–≤–∞—Ä: <b>{good_info[2]}</b>\n–¶–µ–Ω–∞: {good_info[3] * (1 - (await partners_get.get_by_promo((await user_get.get(clb.from_user.id))[7]))[5] / 100)} <s>{good_info[3]}</s>‚ÇΩ\n\n‚ûñ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {good_info[10]}\n\nüè∑Ô∏è –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"
    # –°–æ —Å–∫–∏–¥–∫–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω–æ

    message = f"–¢–æ–≤–∞—Ä: <b>{good_info[2]}</b>\n–¶–µ–Ω–∞: {good_info[3] - good_info[6]} <s>{good_info[3]}</s>‚ÇΩ\n\n‚ûñ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {good_info[10]}\n\nüè∑Ô∏è –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"

    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = [
        types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"create_order_{clb.from_user.id}_{good_info[0]}"),
        types.InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpaygood_{good_info[0]}")

    ]
    buttons = buttons[:9]
    buttons.append(
        types.InlineKeyboardButton(text=f"‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                   callback_data=f"category_{(await categories_get.get_all())[good_info[4] - 1][1]}")
    )
    keyboard.add(*buttons)

    user_info = await user_get.get(int(clb.from_user.id))

    if user_info is None:
        user_info = await user_create.create(int(clb.from_user.id))
        try:
            logger.debug(
                f"–í —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. TG_ID: {user_info[1]}, USER_ID: {user_info[0]}")
        except KeyError:
            logger.error(
                f"–í–µ—Ä–æ—è—Ç–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. TG_ID: {clb.from_user.id}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")

    await clb.message.edit_media(types.InputMedia(media=types.InputFile(f"images/good_{good_info[0]}.png")))
    await clb.message.edit_caption(message, parse_mode="HTML")
    try:
        await clb.message.edit_reply_markup(keyboard)
    except MessageNotModified:
        pass
