from aiogram import types
from aiogram.utils.deep_linking import get_start_link, decode_payload

from ...database.methods.users import get as user_get
from ...database.methods.users import create as user_create

from ...logs import logger


async def start(msg: types.Message) -> None:
    if msg.from_user is None:
        return

    command_args = msg.get_args()



    message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Portable Market</b>!\n\n‚ù£Ô∏è <b>Portable Market</b> - —ç—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä—è–º–æ –≤ Telegram —Å –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏, –±—ã—Å—Ç—Ä—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nüì∞ –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @portable_market"
    photo = open("images/–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞.png", "rb")

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõí"),
        types.KeyboardButton(text="–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ üì™"),
        types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìù"),
        types.KeyboardButton(text="–í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç üîç"),
        types.KeyboardButton(text="–û –º–∞–≥–∞–∑–∏–Ω–µ"),
    ]
    keyboard.add(*buttons)

    user_info = await user_get.get(int(msg.from_user.id))

    if user_info is None:
        user_info = await user_create.create(int(msg.from_user.id))
        try:
            logger.debug(
                f"–í —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. TG_ID: {user_info[1]}, USER_ID: {user_info[0]}")
        except KeyError:
            logger.error(
                f"–í–µ—Ä–æ—è—Ç–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. TG_ID: {msg.from_user.id}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")

    await msg.answer_photo(photo, caption=message, parse_mode="HTML", reply_markup=keyboard)
