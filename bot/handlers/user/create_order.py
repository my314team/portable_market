from aiogram import types

from anypay import AnyPayAPI, AnyPayAPIError

from ...database.methods.users import get as user_get
from ...database.methods.users import create as user_create

from ...database.methods.categories import get as categories_get

from ...database.methods.goods import get as goods_get

from ...database.methods.orders import create as orders_create
from ...database.methods.orders import get as orders_get
from ...database.methods.orders import update as orders_update

from ...logs import logger

api = AnyPayAPI(
    '34F5E0FD201BAE1485', 'qEEAhEIgwJRv1LrmWSvEUIJRirDgox8ikWV3U9A', check=False,  # you can disable credentials check
)


async def anypay_create_order(order_id: int, amount_id: int):
    try:
        await api.get_balance()

    except AnyPayAPIError as exc:
        print(exc)

    bill = await api.create_bill(  # easier way to create payment via SCI
        pay_id=order_id,
        amount=10,
        project_id=11981,
        project_secret='SHwmVER23M3XKEh3C7',
    )
    print(bill)
    return bill.id, bill.url


async def anypay_check_order(pay_id: int) -> bool:
    payments = await api.get_payments(project_id=11981, pay_id=pay_id)
    print(payments)
    is_paid = False

    for payment in payments:
        if payment.status == 'paid':
            is_paid = True
            break

    return is_paid


async def create_order(clb: types.CallbackQuery) -> None:
    if clb.from_user is None:
        return

    method1, method2, user_id, good_id = clb.data.split('_')
    user_id = int(user_id)
    good_id = int(good_id)
    if user_id != clb.from_user.id:
        return

    order_info = await orders_create.create(user_id, good_id)

    if order_info is None:
        logger.error(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑). TG_ID: {clb.from_user.id}. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ order_info: {order_info}")
        return

    logger.debug(f"order_info: {order_info}")

    good_info = await goods_get.get(int(order_info[-1]))

    pay_id, order_url = await anypay_create_order(order_info[0], int(good_info[3]))

    print(pay_id)

    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å", url=f"{order_url}"),
        types.InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpaygood_{order_info[0]}_{pay_id}")

    ]
    keyboard.add(*buttons)

    await clb.message.edit_caption('–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.')
    await clb.message.edit_reply_markup(keyboard)


async def checkpaygood(clb: types.CallbackQuery) -> None:
    if clb.from_user is None:
        return

    order_info = await orders_get.get(clb.from_user.id)

    check_order_id, pay_id = map(int, clb.data.replace('checkpaygood_', '').split('_'))

    if check_order_id != order_info[0]:
        # –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TG_ID: {clb.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {order_info[0]}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–≤—ã–π {check_order_id}.")
        return

    if order_info[2] == 1:
        await clb.answer('–ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–¥–∞—á–∏', show_alert=True)
        return

    order_is_paid = await anypay_check_order(pay_id)

    if not order_is_paid:
        await clb.answer('–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª', show_alert=True)
        return
        # await clb.message.edit_media(types.InputMedia(media=types.InputFile(f"images/–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.png")))
        # await clb.message.edit_caption(
        #    'üö´ –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ (‚Ññ) –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\b‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –¥–æ—à–ª–∞ –¥–æ –Ω–∞—Å.\n\n–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª <b>–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç.</b>',
        #    parse_mode="HTML", reply_markup=keyboard)

    await orders_update.update(check_order_id, 'status', 1)
    await clb.message.answer(
        f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ (‚Ññ{check_order_id}).\n\n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —Ç–æ–≤–∞—Ä, –æ–∂–∏–¥–∞–π—Ç–µ.\n‚ùì –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @pmarket_support')
    logger.success(f'–û–ø–ª–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{check_order_id}')
