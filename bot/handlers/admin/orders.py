from aiogram import types

from anypay import AnyPayAPI, AnyPayAPIError

from ...database.methods.users import get as user_get
from ...database.methods.users import create as user_create

from ...database.methods.categories import get as categories_get

from ...database.methods.goods import get as goods_get

from ...database.methods.orders import create as orders_create
from ...database.methods.orders import get as orders_get
from ...database.methods.orders import update as orders_update

from ...logs import logger

from ...config import get_bot

api = AnyPayAPI(
    '34F5E0FD201BAE1485', 'qEEAhEIgwJRv1LrmWSvEUIJRirDgox8ikWV3U9A', check=False,  # you can disable credentials check
)


async def anypay_create_order(order_id: int, amount_id: int):
    try:
        await api.get_balance()

    except AnyPayAPIError as exc:
        print(exc)

    bill = await api.create_bill(  # easier way to create payment via SCI
        pay_id=order_id,
        amount=10,
        project_id=11981,
        project_secret='SHwmVER23M3XKEh3C7',
    )
    print(bill)
    return bill.id, bill.url


async def anypay_check_order(pay_id: int) -> bool:
    payments = await api.get_payments(project_id=11981, pay_id=pay_id)
    print(payments)
    is_paid = False

    for payment in payments:
        if payment.status == 'paid':
            is_paid = True
            break

    return is_paid


async def all_unget_orders(msg: types.Message) -> None:
    if msg.from_user is None:
        return

    user_info = await user_get.get(msg.from_user.id)

    if user_info[0] != 1:
        return

    all_orders = await orders_get.get_all()
    not_get_orders = []
    for order in all_orders:
        if order[2] == 1:
            not_get_orders.append(order)

    generated_message = f'‚åõÔ∏è –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–≤—Å–µ–≥–æ {len(not_get_orders)}):\n' + '\n\n'.join(
        [f"<b>{order[0]}</b>. –û–ø–ª–∞—á–µ–Ω, –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞. \n–¢–æ–≤–∞—Ä: {(await goods_get.get(order[6]))[2]}"
         for order in not_get_orders])

    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.InlineKeyboardButton(text=f"–∞–ø –≤—ã–¥–∞—Ç—å {order[0]}")
        for order in not_get_orders[:10]
    ]
    keyboard.add(*buttons)

    await msg.answer(generated_message, parse_mode="HTML")


async def give_order(msg: types.Message) -> None:
    if msg.from_user is None:
        return

    msg_parts = msg.text.split()

    if len(msg_parts) <= 3:
        await msg.answer(f"–î–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {msg.text} <<—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞>>", parse_mode="HTML")
        return

    order_id = int(msg_parts[2])

    order_info = await orders_get.get_info(order_id)

    if order_info is None:
        await msg.answer(f"–ó–∞–∫–∞–∑ (‚Ññ{order_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if order_info[2] == 2:
        await msg.answer(f"–ó–∞–∫–∞–∑ (‚Ññ{order_id}) —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return

    customer_tg_id = order_info[1]

    order_text = ' '.join(msg_parts[3:])

    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.InlineKeyboardButton(text=f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–∏–ª", callback_data=f"confirmorder_{order_id}"),
        types.InlineKeyboardButton(text=f"‚ùå –ó–∞–∫–∞–∑ –Ω–µ–≤–µ—Ä–µ–Ω", callback_data=f"badorder_{order_id}")
    ]
    keyboard.add(*buttons)

    await get_bot().send_message(protect_content=True, parse_mode="HTML", chat_id=customer_tg_id, reply_markup=keyboard,
                                 text=f"üí° –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ –∑–∞–∫–∞–∑–∞ (‚Ññ{order_id})\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: <b>{order_text}</b>\n\n–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")

    await msg.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É (‚Ññ{order_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.", reply_markup=keyboard)


async def confirm_order(clb: types.CallbackQuery):
    if clb.from_user is None:
        return

    msg_parts = clb.data.split('_')

    order_id = int(msg_parts[1])

    order_info = await orders_get.get_info(order_id)

    if order_info is None:
        await clb.answer(f"–ó–∞–∫–∞–∑ (‚Ññ{order_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if order_info[2] == 2:
        await clb.answer(f"–ó–∞–∫–∞–∑ (‚Ññ{order_id}) —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return

    customer_tg_id = order_info[1]

    if clb.from_user.id != customer_tg_id:
        await clb.answer(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ (‚Ññ{order_id}).")
        return

    await orders_update.update(order_id, "status", 2)
    await clb.message.answer(text=f"üîí –ó–∞–∫–∞–∑ (‚Ññ{order_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    logger.debug(f"üîí –ó–∞–∫–∞–∑ (‚Ññ{order_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def bad_order(clb: types.CallbackQuery):
    if clb.from_user is None:
        return

    msg_parts = clb.data.split('_')

    order_id = int(msg_parts[1])

    order_info = await orders_get.get_info(order_id)

    if order_info is None:
        await clb.answer(f"–ó–∞–∫–∞–∑ (‚Ññ{order_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    customer_tg_id = order_info[1]

    if clb.from_user.id != customer_tg_id:
        await clb.answer(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ (‚Ññ{order_id}).")
        return

    await orders_update.update(order_id, "status", 1)
    await clb.message.answer(text=f"üîí –ó–∞–∫–∞–∑ (‚Ññ{order_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    logger.debug(f"üîé –ó–∞–∫–∞–∑ (‚Ññ{order_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await get_bot().send_message(protect_content=True, parse_mode="HTML", chat_id=1969225718,
                                 text=f"‚ùóÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É (‚Ññ{order_id})!")
